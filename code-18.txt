#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
int in = 0, out = 0;

sem_t empty;   // Counts empty slots
sem_t full;    // Counts full slots
pthread_mutex_t mutex; // Mutex to protect buffer

void* producer(void* arg) {
    int item;
    for (int i = 0; i < 10; i++) { // Produce 10 items
        item = rand() % 100;

        sem_wait(&empty);          // Wait for empty slot
        pthread_mutex_lock(&mutex);// Lock buffer

        buffer[in] = item;
        printf("Producer produced: %d at buffer[%d]\n", item, in);
        in = (in + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex); 
        sem_post(&full);           // Increment count of full slots

        sleep(rand() % 2);
    }
    pthread_exit(NULL);
}

void* consumer(void* arg) {
    int item;
    for (int i = 0; i < 10; i++) { // Consume 10 items
        sem_wait(&full);            // Wait for full slot
        pthread_mutex_lock(&mutex);// Lock buffer

        item = buffer[out];
        printf("Consumer consumed: %d from buffer[%d]\n", item, out);
        out = (out + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);
        sem_post(&empty);           // Increment count of empty slots

        sleep(rand() % 2);
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t prod, cons;

    // Initialize semaphores and mutex
    sem_init(&empty, 0, BUFFER_SIZE); // Buffer has BUFFER_SIZE empty slots
    sem_init(&full, 0, 0);            // Initially 0 full slots
    pthread_mutex_init(&mutex, NULL);

    // Create threads
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    // Wait for threads to finish
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    // Destroy semaphores and mutex
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
